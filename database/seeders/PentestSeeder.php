<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class PentestSeeder extends Seeder
{
    public function run(): void
    {
        // 0. Insert kategori vulnerabilitas terlebih dahulu
        $categoryIds = [];
        $categories = [
            ['kode' => 'BF', 'nama' => 'Brute Force Login'],
            ['kode' => 'AUTH', 'nama' => 'Otentikasi Default/Weak'],
            ['kode' => 'IDOR', 'nama' => 'Direct Resource Access (IDOR)'],
            ['kode' => 'RBAC', 'nama' => 'Role Escalation'],
            ['kode' => 'SESS', 'nama' => 'Session Hijacking'],
            ['kode' => 'SESS-EXP', 'nama' => 'Expired Session'],
            ['kode' => 'SQLI', 'nama' => 'SQL Injection'],
            ['kode' => 'XSS', 'nama' => 'Cross-Site Scripting'],
            ['kode' => 'CMD', 'nama' => 'Command Injection'],
            ['kode' => 'UPLOAD', 'nama' => 'File Upload Vulnerabilities'],
            ['kode' => 'ERROR', 'nama' => 'Sensitive Info in Errors'],
            ['kode' => 'DATA-EX', 'nama' => 'Sensitive Data Exposure'],
            ['kode' => 'BOLA', 'nama' => 'Business Logic Abuse'],
            ['kode' => 'CSRF', 'nama' => 'Cross-Site Request Forgery'],
            ['kode' => 'DOUBLE', 'nama' => 'Double Submission'],
            ['kode' => 'JS-VULN', 'nama' => 'JS Framework Vulnerabilities'],
            ['kode' => 'DESERIAL', 'nama' => 'Insecure Deserialization'],
        ];

        foreach ($categories as $category) {
            $categoryIds[$category['kode']] = DB::table('vulnerability_categories')->insertGetId([
                'kode' => $category['kode'],
                'nama' => $category['nama'],
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]);
        }

        // 1. Insert ke pentests satu per satu dan simpan ID-nya
        $pentestIds = [];

        $pentests = [
            [
                'aplikasi_id' => 1,
                'tanggal_mulai' => '2023-01-15',
                'tanggal_selesai' => '2023-01-20',
                'metode' => 'Black Box',
                'tingkat' => 'High',
                'scope_testing' => 'Web Application, API Endpoints',
                'objective' => 'Mengidentifikasi kerentanan OWASP Top 10',
                'penanggung_jawab_id' => 1,
                'status' => 'Completed',
                'kesimpulan' => 'Aplikasi memiliki beberapa kerentanan kritis yang perlu segera diperbaiki',
                'rekomendasi' => 'Perlu patch security dan hardening server',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'aplikasi_id' => 2,
                'tanggal_mulai' => '2023-02-01',
                'tanggal_selesai' => '2023-02-05',
                'metode' => 'White Box',
                'tingkat' => 'Critical',
                'scope_testing' => 'Source Code Review, Database Configuration',
                'objective' => 'Audit keamanan kode dan konfigurasi',
                'penanggung_jawab_id' => 1,
                'status' => 'In Progress',
                'kesimpulan' => null,
                'rekomendasi' => null,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]
        ];

        foreach ($pentests as $pentest) {
            $pentestIds[] = DB::table('pentests')->insertGetId($pentest);
        }

        // 2. Insert vulnerabilities (menggunakan $pentestIds[0])
        $vulnerabilityIds = [];
        $vulnerabilities = [
            [
                'pentest_id' => $pentestIds[0],
                'category_id' => $categoryIds['SQLI'],
                'nama_kerentanan' => null,
                'deskripsi' => 'Ditemukan parameter yang rentan terhadap SQL Injection di endpoint /api/user',
                'tingkat_risiko' => 'Critical',
                'lokasi' => '/api/user?id=1',
                'proof_of_concept' => 'Menggunakan payload: 1 OR 1=1--',
                'rekomendasi_perbaikan' => 'Gunakan prepared statement dan parameterized queries',
                'status' => 'Open',
                'tanggal_perbaikan' => null,
                'diperbaiki_oleh' => null,
                'catatan_perbaikan' => null,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'pentest_id' => $pentestIds[0],
                'category_id' => $categoryIds['XSS'],
                'nama_kerentanan' => null,
                'deskripsi' => 'Input field komentar tidak melakukan sanitasi input',
                'tingkat_risiko' => 'High',
                'lokasi' => '/feedback',
                'proof_of_concept' => '<script>alert("XSS")</script>',
                'rekomendasi_perbaikan' => 'Implementasikan input validation dan output encoding',
                'status' => 'Fixed',
                'tanggal_perbaikan' => '2023-01-25',
                'diperbaiki_oleh' => 1,
                'catatan_perbaikan' => 'Telah diimplementasikan sanitasi menggunakan HTMLPurifier',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'pentest_id' => $pentestIds[0],
                'category_id' => $categoryIds['IDOR'],
                'nama_kerentanan' => null,
                'deskripsi' => 'User dapat mengakses data orang lain dengan memanipulasi parameter ID',
                'tingkat_risiko' => 'High',
                'lokasi' => '/api/profile/{id}',
                'proof_of_concept' => 'Mengganti ID dengan milik user lain',
                'rekomendasi_perbaikan' => 'Implementasikan authorization check pada setiap akses resource',
                'status' => 'Open',
                'tanggal_perbaikan' => null,
                'diperbaiki_oleh' => null,
                'catatan_perbaikan' => null,
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]
        ];

        foreach ($vulnerabilities as $vuln) {
            $vulnerabilityIds[] = DB::table('vulnerabilities')->insertGetId($vuln);
        }

        // 3. Insert evidences
        DB::table('pentest_evidences')->insert([
            [
                'vulnerability_id' => $vulnerabilityIds[0],
                'nama_file' => 'sql_injection_proof.png',
                'path' => 'evidence/1/sql_injection_proof.png',
                'tipe_file' => 'image/png',
                'keterangan' => 'Screenshot hasil eksekusi SQL Injection',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'vulnerability_id' => $vulnerabilityIds[1],
                'nama_file' => 'xss_exploit.mp4',
                'path' => 'evidence/2/xss_exploit.mp4',
                'tipe_file' => 'video/mp4',
                'keterangan' => 'Rekaman eksploitasi XSS',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'vulnerability_id' => $vulnerabilityIds[2],
                'nama_file' => 'idor_proof.png',
                'path' => 'evidence/3/idor_proof.png',
                'tipe_file' => 'image/png',
                'keterangan' => 'Screenshot akses data user lain',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]
        ]);

        // 4. Insert report
        DB::table('pentest_reports')->insert([
            [
                'pentest_id' => $pentestIds[0],
                'judul_laporan' => 'Laporan Pentest Aplikasi SIMDA 2023',
                'nomor_laporan' => 'PT/SIMDA/2023/001',
                'executive_summary' => 'Ditemukan 5 kerentanan kritis dan 3 kerentanan tinggi...',
                'metodologi' => 'Testing mengikuti standar OWASP Testing Guide v4',
                'rekomendasi_keseluruhan' => 'Perlu dilakukan hardening server dan perbaikan kode',
                'file_laporan' => 'reports/PT_SIMDA_2023_001.pdf',
                'dibuat_oleh' => 1,
                'tanggal_penerbitan' => '2023-01-22',
                'klasifikasi' => 'Terbatas',
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]
        ]);

        // 5. Insert history
        DB::table('pentest_histories')->insert([
            [
                'pentest_id' => $pentestIds[0],
                'user_id' => 1,
                'aksi' => 'Create',
                'deskripsi_perubahan' => 'Membuat pentest baru',
                'data_sebelumnya' => null,
                'data_setelahnya' => json_encode($pentests[0]),
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ],
            [
                'pentest_id' => $pentestIds[0],
                'user_id' => 1,
                'aksi' => 'Update',
                'deskripsi_perubahan' => 'Menambahkan temuan kerentanan',
                'data_sebelumnya' => null,
                'data_setelahnya' => json_encode($vulnerabilities[0]),
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]
        ]);
    }
}